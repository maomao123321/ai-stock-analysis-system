services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: agentic-stock-postgres
    environment:
      POSTGRES_DB: agentic_stock_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: agentic-stock-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端 FastAPI 服务 + MCP 服务器
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agentic-stock-backend
    ports:
      - "8000:8000"  # FastAPI 端口
      - "8001:8001"  # MCP 服务器端口
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/agentic_stock_db
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
      - MCP_SERVER_PORT=8001
      - MCP_SERVER_HOST=0.0.0.0
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-your_api_key_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_key_here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentic-network
    volumes:
      - ./backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端 React 服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: agentic-stock-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - agentic-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  agentic-network:
    driver: bridge
